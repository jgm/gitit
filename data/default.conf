# This is the default configuration file for gitit.
# Lines beginning with # are comments.
# Uncommented lines show the defaults.

port: 5001
# sets the port on which the web server will run.

repository-type: Git
# specifies the type of repository used for wiki content.
# Options are Git and Darcs.

repository-path: wikidata
# specifies the path of the repository directory.  If it does not
# exist, gitit will create it on startup.

user-file: gitit-users
# specifies the path of the file containing user login information.
# If it does not exist, gitit will create it (with an empty user list).

static-dir: static
# specifies the path of the static directory (containing javascript,
# css, and images).  If it does not exist, gitit will create it
# and populate it with required scripts, stylesheets, and images.

default-page-type: Markdown 
# specifies the type of markup used to interpret pages in
# the wiki. Two values are currently supported: Markdown and RST.
# If Markdown is selected, pandoc's syntax extensions (for footnotes,
# delimited code blocks, etc.) will be enabled.  Note that pandoc's
# reStructuredText parser is not complete, so some pages may
# not be rendered correctly if RST is selected.

template-file: template.html
# specifies the path of the page template file.  If it does not exist,
# gitit will create a default template.  Users may wish to edit this
# file to customize the appearance of their wiki.  The template file
# is an HStringTemplate template.  Variables to be interpolated appear
# between $'s. Literal $'s must be backslash-escaped.

log-file: gitit.log
# specifies the path of gitit's log file.  If it does not exist,
# gitit will create it. The log is in Apache combined log format.

log-level: WARNING
# determines how much information is logged.
# Possible values (from most to least verbose) are DEBUG, INFO,
# NOTICE, WARNING, ERROR, CRITICAL, ALERT, EMERGENCY.

front-page: Front Page
# specifies which wiki page is to be used as the wiki's front page.
# Gitit creates a default front page on startup, if one does not exist
# already.

no-delete: Front Page, Help
# specifies pages that cannot be deleted through the web interface.
# (They can still be deleted directly using git or darcs.)
# A comma-separated list of page names.  Leave blank to allow
# every page to be deleted.

no-edit: Help
# specifies pages that cannot be edited through the web interface.
# Leave blank to allow every page to be edited.

table-of-contents: yes
# specifies whether to print a tables of contents (with links to
# sections) on each wiki page.

plugins: 
# specifies a list of plugins to load.  Plugins may be specified
# either by their path or by their module name.  If the plugin name
# starts with Gitit.Plugin., gitit will assume that the plugin is
# an installed module and will not try to find a source file.
# Examples:
# plugins: plugins/DotPlugin.hs, CapitalizeEmphasisPlugin.hs
# plugins: plugins/DotPlugin
# plugins: Gitit.Plugin.InterwikiLinks

max-cache-size: 2000000
# specifies an upper limit on the size of the in-memory page cache,
# in bytes.

max-upload-size: 100000
# specifies an upper limit on the size (in bytes) of files uploaded
# through the wiki's web interface.

debug-mode: no
# if "yes", causes debug information to be logged while gitit is running.

mime-types-file: /etc/mime.types
# specifies the path of a file containing mime type mappings.
# Each line of the file should contain two fields, separated by
# whitespace. The first field is the mime type, the second is a
# file extension.  For example:
# video/x-ms-wmx                    wmx
# If the file is not found, some simple defaults will be used.

use-recaptcha: no
# if "yes", causes gitit to use the reCAPTCHA service
# (http://recaptcha.net) to prevent bots from creating accounts.

recaptcha-private-key: 
recaptcha-public-key: 
# specifies the public and private keys for the reCAPTCHA service.
# To get these, you need to create an account at http://recaptcha.net.

access-question:
access-question-answers: 
# specifies a question that users must answer when they attempt to create
# an account, along with a comma-separated list of acceptable answers.
# This can be used to institute a rudimentary password for signing up as
# a user on the wiki, or as an alternative to reCAPTCHA.
# Example:
# access-question:  What is the code given to you by Ms. X?
# access-question-answers:  RED DOG, red dog

